// Generated by gir (https://github.com/gtk-rs/gir @ b2a1c6f9b362)
// from ../misc (@ ???)
// DO NOT EDIT

use crate::ffi;
use crate::polkit;
use glib::{
    object::ObjectType as _,
    prelude::*,
    signal::{SignalHandlerId, connect_raw},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "PolkitAgentSession")]
    pub struct Session(Object<ffi::PolkitAgentSession, ffi::PolkitAgentSessionClass>);

    match fn {
        type_ => || ffi::polkit_agent_session_get_type(),
    }
}

impl Session {
    #[doc(alias = "polkit_agent_session_new")]
    pub fn new(identity: &impl IsA<polkit::Identity>, cookie: &str) -> Session {
        unsafe {
            from_glib_full(ffi::polkit_agent_session_new(
                identity.as_ref().to_glib_none().0,
                cookie.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "polkit_agent_session_cancel")]
    pub fn cancel(&self) {
        unsafe {
            ffi::polkit_agent_session_cancel(self.to_glib_none().0);
        }
    }

    #[doc(alias = "polkit_agent_session_initiate")]
    pub fn initiate(&self) {
        unsafe {
            ffi::polkit_agent_session_initiate(self.to_glib_none().0);
        }
    }

    #[doc(alias = "polkit_agent_session_response")]
    pub fn response(&self, response: &str) {
        unsafe {
            ffi::polkit_agent_session_response(self.to_glib_none().0, response.to_glib_none().0);
        }
    }

    pub fn cookie(&self) -> Option<glib::GString> {
        ObjectExt::property(self, "cookie")
    }

    pub fn identity(&self) -> Option<polkit::Identity> {
        ObjectExt::property(self, "identity")
    }

    #[doc(alias = "completed")]
    pub fn connect_completed<F: Fn(&Self, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn completed_trampoline<F: Fn(&Session, bool) + 'static>(
            this: *mut ffi::PolkitAgentSession,
            gained_authorization: glib::ffi::gboolean,
            f: glib::ffi::gpointer,
        ) {
            unsafe {
                let f: &F = &*(f as *const F);
                f(&from_glib_borrow(this), from_glib(gained_authorization))
            }
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"completed".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    completed_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "request")]
    pub fn connect_request<F: Fn(&Self, &str, bool) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn request_trampoline<F: Fn(&Session, &str, bool) + 'static>(
            this: *mut ffi::PolkitAgentSession,
            request: *mut std::ffi::c_char,
            echo_on: glib::ffi::gboolean,
            f: glib::ffi::gpointer,
        ) {
            unsafe {
                let f: &F = &*(f as *const F);
                f(
                    &from_glib_borrow(this),
                    &glib::GString::from_glib_borrow(request),
                    from_glib(echo_on),
                )
            }
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"request".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    request_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "show-error")]
    pub fn connect_show_error<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_error_trampoline<F: Fn(&Session, &str) + 'static>(
            this: *mut ffi::PolkitAgentSession,
            text: *mut std::ffi::c_char,
            f: glib::ffi::gpointer,
        ) {
            unsafe {
                let f: &F = &*(f as *const F);
                f(
                    &from_glib_borrow(this),
                    &glib::GString::from_glib_borrow(text),
                )
            }
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"show-error".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    show_error_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }

    #[doc(alias = "show-info")]
    pub fn connect_show_info<F: Fn(&Self, &str) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn show_info_trampoline<F: Fn(&Session, &str) + 'static>(
            this: *mut ffi::PolkitAgentSession,
            text: *mut std::ffi::c_char,
            f: glib::ffi::gpointer,
        ) {
            unsafe {
                let f: &F = &*(f as *const F);
                f(
                    &from_glib_borrow(this),
                    &glib::GString::from_glib_borrow(text),
                )
            }
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"show-info".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    show_info_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}
