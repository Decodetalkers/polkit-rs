// Generated by gir (https://github.com/gtk-rs/gir @ b2a1c6f9b362)
// from ../misc (@ ???)
// DO NOT EDIT

use crate::ffi;
use crate::polkit;
use glib::{prelude::*, translate::*};
use std::{boxed::Box as Box_, pin::Pin};

use super::RegisterFlags;

/// Safe binding ListenerHandler, avoid to use glib::Pointer
pub struct ListenerHandler(glib::Pointer);

impl Drop for ListenerHandler {
    fn drop(&mut self) {
        self.unregister()
    }
}

impl ListenerHandler {
    pub fn unregister(&self) {
        unsafe { ffi::polkit_agent_listener_unregister(self.0) }
    }
}

glib::wrapper! {
    #[doc(alias = "PolkitAgentListener")]
    pub struct Listener(Object<ffi::PolkitAgentListener, ffi::PolkitAgentListenerClass>);

    match fn {
        type_ => || ffi::polkit_agent_listener_get_type(),
    }
}

impl Listener {
    pub const NONE: Option<&'static Listener> = None;

    #[doc(alias = "polkit_agent_listener_unregister")]
    pub fn unregister(registration_handle: &ListenerHandler) {
        unsafe { ffi::polkit_agent_listener_unregister(registration_handle.0) }
    }
}

pub trait ListenerExt: IsA<Listener> + 'static {
    #[doc(alias = "polkit_agent_listener_initiate_authentication")]
    fn initiate_authentication<P: FnOnce(Result<(), glib::Error>) + 'static>(
        &self,
        action_id: &str,
        message: &str,
        icon_name: &str,
        details: &polkit::Details,
        cookie: &str,
        identities: &[polkit::Identity],
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    ) {
        let main_context = glib::MainContext::ref_thread_default();
        let is_main_context_owner = main_context.is_owner();
        let has_acquired_main_context = (!is_main_context_owner)
            .then(|| main_context.acquire().ok())
            .flatten();
        assert!(
            is_main_context_owner || has_acquired_main_context.is_some(),
            "Async operations only allowed if the thread is owning the MainContext"
        );

        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> =
            Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn initiate_authentication_trampoline<
            P: FnOnce(Result<(), glib::Error>) + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            let mut error = std::ptr::null_mut();
            unsafe {
                ffi::polkit_agent_listener_initiate_authentication_finish(
                    _source_object as *mut _,
                    res,
                    &mut error,
                );
                let result = if error.is_null() {
                    Ok(())
                } else {
                    Err(from_glib_full(error))
                };
                let callback: Box_<glib::thread_guard::ThreadGuard<P>> =
                    Box_::from_raw(user_data as *mut _);
                let callback: P = callback.into_inner();
                callback(result);
            }
        }
        let callback = initiate_authentication_trampoline::<P>;
        unsafe {
            ffi::polkit_agent_listener_initiate_authentication(
                self.as_ref().to_glib_none().0,
                action_id.to_glib_none().0,
                message.to_glib_none().0,
                icon_name.to_glib_none().0,
                details.to_glib_none().0,
                cookie.to_glib_none().0,
                identities.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    fn initiate_authentication_future(
        &self,
        action_id: &str,
        message: &str,
        icon_name: &str,
        details: &polkit::Details,
        cookie: &str,
        identities: &[polkit::Identity],
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<(), glib::Error>> + 'static>> {
        let action_id = String::from(action_id);
        let message = String::from(message);
        let icon_name = String::from(icon_name);
        let details = details.clone();
        let cookie = String::from(cookie);
        let identities = identities.to_vec().clone();
        Box_::pin(gio::GioFuture::new(self, move |obj, cancellable, send| {
            obj.initiate_authentication(
                &action_id,
                &message,
                &icon_name,
                &details,
                &cookie,
                &identities,
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }

    #[doc(alias = "polkit_agent_listener_register")]
    fn register(
        &self,
        flags: RegisterFlags,
        subject: &impl IsA<polkit::Subject>,
        object_path: &str,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<ListenerHandler, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let pointer = ffi::polkit_agent_listener_register(
                self.as_ref().to_glib_none().0,
                flags.bits(),
                subject.as_ref().to_glib_none().0,
                object_path.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(ListenerHandler(pointer))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "polkit_agent_listener_register_with_options")]
    fn register_with_options(
        &self,
        flags: RegisterFlags,
        subject: &impl IsA<polkit::Subject>,
        object_path: &str,
        options: Option<&glib::Variant>,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<ListenerHandler, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let pointer = ffi::polkit_agent_listener_register_with_options(
                self.as_ref().to_glib_none().0,
                flags.bits(),
                subject.as_ref().to_glib_none().0,
                object_path.to_glib_none().0,
                options.to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(ListenerHandler(pointer))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

impl<O: IsA<Listener>> ListenerExt for O {}
