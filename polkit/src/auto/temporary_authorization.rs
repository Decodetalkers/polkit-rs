// Generated by gir (https://github.com/gtk-rs/gir @ b2a1c6f9b362)
// from ../misc (@ ???)
// DO NOT EDIT

use crate::{Subject, ffi};
use glib::translate::*;

glib::wrapper! {
    #[doc(alias = "PolkitTemporaryAuthorization")]
    pub struct TemporaryAuthorization(Object<ffi::PolkitTemporaryAuthorization, ffi::PolkitTemporaryAuthorizationClass>);

    match fn {
        type_ => || ffi::polkit_temporary_authorization_get_type(),
    }
}

impl TemporaryAuthorization {
    #[doc(alias = "polkit_temporary_authorization_get_action_id")]
    #[doc(alias = "get_action_id")]
    pub fn action_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::polkit_temporary_authorization_get_action_id(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "polkit_temporary_authorization_get_id")]
    #[doc(alias = "get_id")]
    pub fn id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::polkit_temporary_authorization_get_id(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "polkit_temporary_authorization_get_subject")]
    #[doc(alias = "get_subject")]
    pub fn subject(&self) -> Subject {
        unsafe {
            from_glib_full(ffi::polkit_temporary_authorization_get_subject(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "polkit_temporary_authorization_get_time_expires")]
    #[doc(alias = "get_time_expires")]
    pub fn time_expires(&self) -> u64 {
        unsafe { ffi::polkit_temporary_authorization_get_time_expires(self.to_glib_none().0) }
    }

    #[doc(alias = "polkit_temporary_authorization_get_time_obtained")]
    #[doc(alias = "get_time_obtained")]
    pub fn time_obtained(&self) -> u64 {
        unsafe { ffi::polkit_temporary_authorization_get_time_obtained(self.to_glib_none().0) }
    }
}
