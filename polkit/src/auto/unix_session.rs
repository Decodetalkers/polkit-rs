// Generated by gir (https://github.com/gtk-rs/gir @ b2a1c6f9b362)
// from ../misc (@ ???)
// DO NOT EDIT

use crate::{Subject, ffi};
use glib::{
    prelude::*,
    signal::{SignalHandlerId, connect_raw},
    translate::*,
};
use std::{boxed::Box as Box_, pin::Pin};

glib::wrapper! {
    #[doc(alias = "PolkitUnixSession")]
    pub struct UnixSession(Object<ffi::PolkitUnixSession, ffi::PolkitUnixSessionClass>) @implements Subject;

    match fn {
        type_ => || ffi::polkit_unix_session_get_type(),
    }
}

impl UnixSession {
    #[doc(alias = "polkit_unix_session_get_session_id")]
    #[doc(alias = "get_session_id")]
    #[doc(alias = "session-id")]
    pub fn session_id(&self) -> glib::GString {
        unsafe {
            from_glib_none(ffi::polkit_unix_session_get_session_id(
                self.to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "polkit_unix_session_set_session_id")]
    #[doc(alias = "session-id")]
    pub fn set_session_id(&self, session_id: &str) {
        unsafe {
            ffi::polkit_unix_session_set_session_id(
                self.to_glib_none().0,
                session_id.to_glib_none().0,
            );
        }
    }

    #[doc(alias = "polkit_unix_session_new")]
    pub fn new(session_id: &str) -> Self {
        let subject: Subject =
            unsafe { from_glib_full(ffi::polkit_unix_session_new(session_id.to_glib_none().0)) };
        subject.dynamic_cast().expect("it should always work")
    }

    #[doc(alias = "polkit_unix_session_new_for_process")]
    pub fn new_for_process<P: FnOnce(Result<Self, glib::Error>) + 'static>(
        pid: i32,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    ) {
        let main_context = glib::MainContext::ref_thread_default();
        let is_main_context_owner = main_context.is_owner();
        let has_acquired_main_context = (!is_main_context_owner)
            .then(|| main_context.acquire().ok())
            .flatten();
        assert!(
            is_main_context_owner || has_acquired_main_context.is_some(),
            "Async operations only allowed if the thread is owning the MainContext"
        );

        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> =
            Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn new_for_process_trampoline<
            P: FnOnce(Result<UnixSession, glib::Error>) + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            unsafe {
                let mut error = std::ptr::null_mut();
                let ret = ffi::polkit_unix_session_new_for_process_finish(res, &mut error);
                let result = if error.is_null() {
                    let subject: Subject = from_glib_full(ret);
                    Ok(subject.unsafe_cast())
                } else {
                    Err(from_glib_full(error))
                };
                let callback: Box_<glib::thread_guard::ThreadGuard<P>> =
                    Box_::from_raw(user_data as *mut _);
                let callback: P = callback.into_inner();
                callback(result);
            }
        }
        let callback = new_for_process_trampoline::<P>;
        unsafe {
            ffi::polkit_unix_session_new_for_process(
                pid,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn new_for_process_future(
        pid: i32,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<Self, glib::Error>> + 'static>> {
        Box_::pin(gio::GioFuture::new(&(), move |_obj, cancellable, send| {
            Self::new_for_process(pid, Some(cancellable), move |res| {
                send.resolve(res);
            });
        }))
    }

    #[doc(alias = "polkit_unix_session_new_for_process_sync")]
    pub fn new_for_process_sync(
        pid: i32,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<Self, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::polkit_unix_session_new_for_process_sync(
                pid,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                let subject: Subject = from_glib_full(ret);
                Ok(subject.unsafe_cast())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "session-id")]
    pub fn connect_session_id_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_session_id_trampoline<F: Fn(&UnixSession) + 'static>(
            this: *mut ffi::PolkitUnixSession,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            unsafe {
                let f: &F = &*(f as *const F);
                f(&from_glib_borrow(this))
            }
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::session-id".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_session_id_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}
