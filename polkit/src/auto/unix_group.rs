// Generated by gir (https://github.com/gtk-rs/gir @ b2a1c6f9b362)
// from ../misc (@ ???)
// DO NOT EDIT

use crate::{Identity, ffi};
use glib::{
    prelude::*,
    signal::{SignalHandlerId, connect_raw},
    translate::*,
};
use std::boxed::Box as Box_;

glib::wrapper! {
    #[doc(alias = "PolkitUnixGroup")]
    pub struct UnixGroup(Object<ffi::PolkitUnixGroup, ffi::PolkitUnixGroupClass>) @implements Identity;

    match fn {
        type_ => || ffi::polkit_unix_group_get_type(),
    }
}

impl UnixGroup {
    #[doc(alias = "polkit_unix_group_get_gid")]
    #[doc(alias = "get_gid")]
    pub fn gid(&self) -> i32 {
        unsafe { ffi::polkit_unix_group_get_gid(self.to_glib_none().0) }
    }

    #[doc(alias = "polkit_unix_group_set_gid")]
    #[doc(alias = "gid")]
    pub fn set_gid(&self, gid: i32) {
        unsafe {
            ffi::polkit_unix_group_set_gid(self.to_glib_none().0, gid);
        }
    }

    #[allow(clippy::new_ret_no_self)]
    #[doc(alias = "polkit_unix_group_new")]
    pub fn new(gid: i32) -> Self {
        let identify: Identity = unsafe { from_glib_full(ffi::polkit_unix_group_new(gid)) };
        identify.dynamic_cast().expect("It should always work")
    }

    #[doc(alias = "polkit_unix_group_new_for_name")]
    pub fn new_for_name(name: &str) -> Result<Option<Identity>, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::polkit_unix_group_new_for_name(name.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "gid")]
    pub fn connect_gid_notify<F: Fn(&Self) + 'static>(&self, f: F) -> SignalHandlerId {
        unsafe extern "C" fn notify_gid_trampoline<F: Fn(&UnixGroup) + 'static>(
            this: *mut ffi::PolkitUnixGroup,
            _param_spec: glib::ffi::gpointer,
            f: glib::ffi::gpointer,
        ) {
            unsafe {
                let f: &F = &*(f as *const F);
                f(&from_glib_borrow(this))
            }
        }
        unsafe {
            let f: Box_<F> = Box_::new(f);
            connect_raw(
                self.as_ptr() as *mut _,
                c"notify::gid".as_ptr() as *const _,
                Some(std::mem::transmute::<*const (), unsafe extern "C" fn()>(
                    notify_gid_trampoline::<F> as *const (),
                )),
                Box_::into_raw(f),
            )
        }
    }
}
