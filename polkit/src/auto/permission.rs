// Generated by gir (https://github.com/gtk-rs/gir @ b2a1c6f9b362)
// from ../misc (@ ???)
// DO NOT EDIT

use crate::{Subject, ffi};
use glib::{prelude::*, translate::*};
use std::{boxed::Box as Box_, pin::Pin};

glib::wrapper! {
    #[doc(alias = "PolkitPermission")]
    pub struct Permission(Object<ffi::PolkitPermission>) @extends gio::Permission;

    match fn {
        type_ => || ffi::polkit_permission_get_type(),
    }
}

impl Permission {
    #[doc(alias = "polkit_permission_new_sync")]
    pub fn new_sync(
        action_id: &str,
        subject: Option<&impl IsA<Subject>>,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
    ) -> Result<Permission, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::polkit_permission_new_sync(
                action_id.to_glib_none().0,
                subject.map(|p| p.as_ref()).to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                &mut error,
            );
            if error.is_null() {
                Ok(gio::Permission::from_glib_full(ret).unsafe_cast())
            } else {
                Err(from_glib_full(error))
            }
        }
    }

    #[doc(alias = "polkit_permission_get_action_id")]
    #[doc(alias = "get_action_id")]
    #[doc(alias = "action-id")]
    pub fn action_id(&self) -> glib::GString {
        unsafe { from_glib_none(ffi::polkit_permission_get_action_id(self.to_glib_none().0)) }
    }

    #[doc(alias = "polkit_permission_get_subject")]
    #[doc(alias = "get_subject")]
    pub fn subject(&self) -> Subject {
        unsafe { from_glib_none(ffi::polkit_permission_get_subject(self.to_glib_none().0)) }
    }

    #[doc(alias = "polkit_permission_new")]
    pub fn new<P: FnOnce(Result<gio::Permission, glib::Error>) + 'static>(
        action_id: &str,
        subject: Option<&impl IsA<Subject>>,
        cancellable: Option<&impl IsA<gio::Cancellable>>,
        callback: P,
    ) {
        let main_context = glib::MainContext::ref_thread_default();
        let is_main_context_owner = main_context.is_owner();
        let has_acquired_main_context = (!is_main_context_owner)
            .then(|| main_context.acquire().ok())
            .flatten();
        assert!(
            is_main_context_owner || has_acquired_main_context.is_some(),
            "Async operations only allowed if the thread is owning the MainContext"
        );

        let user_data: Box_<glib::thread_guard::ThreadGuard<P>> =
            Box_::new(glib::thread_guard::ThreadGuard::new(callback));
        unsafe extern "C" fn new_trampoline<
            P: FnOnce(Result<gio::Permission, glib::Error>) + 'static,
        >(
            _source_object: *mut glib::gobject_ffi::GObject,
            res: *mut gio::ffi::GAsyncResult,
            user_data: glib::ffi::gpointer,
        ) {
            unsafe {
                let mut error = std::ptr::null_mut();
                let ret = ffi::polkit_permission_new_finish(res, &mut error);
                let result = if error.is_null() {
                    Ok(from_glib_full(ret))
                } else {
                    Err(from_glib_full(error))
                };
                let callback: Box_<glib::thread_guard::ThreadGuard<P>> =
                    Box_::from_raw(user_data as *mut _);
                let callback: P = callback.into_inner();
                callback(result);
            }
        }
        let callback = new_trampoline::<P>;
        unsafe {
            ffi::polkit_permission_new(
                action_id.to_glib_none().0,
                subject.map(|p| p.as_ref()).to_glib_none().0,
                cancellable.map(|p| p.as_ref()).to_glib_none().0,
                Some(callback),
                Box_::into_raw(user_data) as *mut _,
            );
        }
    }

    pub fn new_future(
        action_id: &str,
        subject: Option<&(impl IsA<Subject> + Clone + 'static)>,
    ) -> Pin<Box_<dyn std::future::Future<Output = Result<gio::Permission, glib::Error>> + 'static>>
    {
        let action_id = String::from(action_id);
        let subject = subject.map(ToOwned::to_owned);
        Box_::pin(gio::GioFuture::new(&(), move |_obj, cancellable, send| {
            Self::new(
                &action_id,
                subject.as_ref().map(::std::borrow::Borrow::borrow),
                Some(cancellable),
                move |res| {
                    send.resolve(res);
                },
            );
        }))
    }
}
