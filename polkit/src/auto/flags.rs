// Generated by gir (https://github.com/gtk-rs/gir @ b2a1c6f9b362)
// from ../misc (@ ???)
// DO NOT EDIT

use crate::ffi;
use glib::{bitflags::bitflags, prelude::*, translate::*};

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "PolkitAuthorityFeatures")]
    pub struct AuthorityFeatures: u32 {
        #[doc(alias = "POLKIT_AUTHORITY_FEATURES_NONE")]
        const NONE = ffi::POLKIT_AUTHORITY_FEATURES_NONE as _;
        #[doc(alias = "POLKIT_AUTHORITY_FEATURES_TEMPORARY_AUTHORIZATION")]
        const TEMPORARY_AUTHORIZATION = ffi::POLKIT_AUTHORITY_FEATURES_TEMPORARY_AUTHORIZATION as _;
    }
}

#[doc(hidden)]
impl IntoGlib for AuthorityFeatures {
    type GlibType = ffi::PolkitAuthorityFeatures;

    #[inline]
    fn into_glib(self) -> ffi::PolkitAuthorityFeatures {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PolkitAuthorityFeatures> for AuthorityFeatures {
    #[inline]
    unsafe fn from_glib(value: ffi::PolkitAuthorityFeatures) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for AuthorityFeatures {
    #[inline]
    #[doc(alias = "polkit_authority_features_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::polkit_authority_features_get_type()) }
    }
}

impl glib::HasParamSpec for AuthorityFeatures {
    type ParamSpec = glib::ParamSpecFlags;
    type SetValue = Self;
    type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder
    }
}

impl glib::value::ValueType for AuthorityFeatures {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for AuthorityFeatures {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        unsafe { from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0)) }
    }
}

impl ToValue for AuthorityFeatures {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<AuthorityFeatures> for glib::Value {
    #[inline]
    fn from(v: AuthorityFeatures) -> Self {
        ToValue::to_value(&v)
    }
}

bitflags! {
    #[derive(Clone, Copy, Debug, PartialEq, Eq, Hash)]
    #[doc(alias = "PolkitCheckAuthorizationFlags")]
    pub struct CheckAuthorizationFlags: u32 {
        #[doc(alias = "POLKIT_CHECK_AUTHORIZATION_FLAGS_NONE")]
        const NONE = ffi::POLKIT_CHECK_AUTHORIZATION_FLAGS_NONE as _;
        #[doc(alias = "POLKIT_CHECK_AUTHORIZATION_FLAGS_ALLOW_USER_INTERACTION")]
        const ALLOW_USER_INTERACTION = ffi::POLKIT_CHECK_AUTHORIZATION_FLAGS_ALLOW_USER_INTERACTION as _;
        #[doc(alias = "POLKIT_CHECK_AUTHORIZATION_FLAGS_ALWAYS_CHECK")]
        const ALWAYS_CHECK = ffi::POLKIT_CHECK_AUTHORIZATION_FLAGS_ALWAYS_CHECK as _;
    }
}

#[doc(hidden)]
impl IntoGlib for CheckAuthorizationFlags {
    type GlibType = ffi::PolkitCheckAuthorizationFlags;

    #[inline]
    fn into_glib(self) -> ffi::PolkitCheckAuthorizationFlags {
        self.bits()
    }
}

#[doc(hidden)]
impl FromGlib<ffi::PolkitCheckAuthorizationFlags> for CheckAuthorizationFlags {
    #[inline]
    unsafe fn from_glib(value: ffi::PolkitCheckAuthorizationFlags) -> Self {
        Self::from_bits_truncate(value)
    }
}

impl StaticType for CheckAuthorizationFlags {
    #[inline]
    #[doc(alias = "polkit_check_authorization_flags_get_type")]
    fn static_type() -> glib::Type {
        unsafe { from_glib(ffi::polkit_check_authorization_flags_get_type()) }
    }
}

impl glib::HasParamSpec for CheckAuthorizationFlags {
    type ParamSpec = glib::ParamSpecFlags;
    type SetValue = Self;
    type BuilderFn = fn(&str) -> glib::ParamSpecFlagsBuilder<Self>;

    fn param_spec_builder() -> Self::BuilderFn {
        Self::ParamSpec::builder
    }
}

impl glib::value::ValueType for CheckAuthorizationFlags {
    type Type = Self;
}

unsafe impl<'a> glib::value::FromValue<'a> for CheckAuthorizationFlags {
    type Checker = glib::value::GenericValueTypeChecker<Self>;

    #[inline]
    unsafe fn from_value(value: &'a glib::Value) -> Self {
        unsafe { from_glib(glib::gobject_ffi::g_value_get_flags(value.to_glib_none().0)) }
    }
}

impl ToValue for CheckAuthorizationFlags {
    #[inline]
    fn to_value(&self) -> glib::Value {
        let mut value = glib::Value::for_value_type::<Self>();
        unsafe {
            glib::gobject_ffi::g_value_set_flags(value.to_glib_none_mut().0, self.into_glib());
        }
        value
    }

    #[inline]
    fn value_type(&self) -> glib::Type {
        Self::static_type()
    }
}

impl From<CheckAuthorizationFlags> for glib::Value {
    #[inline]
    fn from(v: CheckAuthorizationFlags) -> Self {
        ToValue::to_value(&v)
    }
}
