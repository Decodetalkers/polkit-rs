// Generated by gir (https://github.com/gtk-rs/gir @ b2a1c6f9b362)
// from ../misc (@ ???)
// DO NOT EDIT

use crate::ffi;
use glib::{prelude::*, translate::*};

glib::wrapper! {
    #[doc(alias = "PolkitIdentity")]
    pub struct Identity(Interface<ffi::PolkitIdentity, ffi::PolkitIdentityIface>);

    match fn {
        type_ => || ffi::polkit_identity_get_type(),
    }
}

impl Identity {
    pub const NONE: Option<&'static Identity> = None;

    #[doc(alias = "polkit_identity_from_string")]
    pub fn from_string(str: &str) -> Result<Option<Identity>, glib::Error> {
        unsafe {
            let mut error = std::ptr::null_mut();
            let ret = ffi::polkit_identity_from_string(str.to_glib_none().0, &mut error);
            if error.is_null() {
                Ok(from_glib_full(ret))
            } else {
                Err(from_glib_full(error))
            }
        }
    }
}

pub trait IdentityExt: IsA<Identity> + 'static {
    #[doc(alias = "polkit_identity_equal")]
    fn equal(&self, b: &impl IsA<Identity>) -> bool {
        unsafe {
            from_glib(ffi::polkit_identity_equal(
                self.as_ref().to_glib_none().0,
                b.as_ref().to_glib_none().0,
            ))
        }
    }

    #[doc(alias = "polkit_identity_hash")]
    fn hash(&self) -> u32 {
        unsafe { ffi::polkit_identity_hash(self.as_ref().to_glib_none().0) }
    }

    #[doc(alias = "polkit_identity_to_string")]
    fn to_string(&self) -> glib::GString {
        unsafe {
            from_glib_full(ffi::polkit_identity_to_string(
                self.as_ref().to_glib_none().0,
            ))
        }
    }
}

impl<O: IsA<Identity>> IdentityExt for O {}
